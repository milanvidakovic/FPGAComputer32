
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module vga_320x240#(parameter N = 16)(
	input wire [1:0] vga_mode,
	//////////// CLOCK //////////
	input clk,

	//////////// reset //////////
	input reset,

	//////////// GPIO //////////
	output wire rr, 
	output wire rg, 
	output wire rb, 
	output wire hs, 
	output wire vs,

	input [N-1:0] data,
	output [N-1:0] raddr,
	output rrd, 
	output rwr
);

//=======================================================
//  PARAMETER declarations
//=======================================================

localparam VIDEO_MEM_ADDR = 1024/2;
localparam IN_LINE                       = 0;
localparam H_BLANK                       = 1;
localparam V_BLANK                       = 2;
localparam READ_SPRITES                  = 3;
localparam READ_SPRITE_X                 = 4;
localparam READ_SPRITE_Y                 = 5;
localparam READ_SPRITE_TRANSPARENT_COLOR = 6;
localparam READ_SPRITE_DATA              = 7;
localparam SCAN_IDLE                     = 8;

localparam SPRITE_NUM                    = 4;

//=======================================================
//  PORT declarations
//=======================================================


//=======================================================
//  REG/WIRE declarations
//=======================================================

reg clk25; // 25MHz signal (clk divided by 2)
reg clk50;

//reg newframe;
//reg newline;

reg [9:0] x;
reg [9:0] y;
wire valid;
reg [15:0] curr_char;

reg [9:0] xx;
reg [9:0] yy;

wire [15:0] pixels; // Pixels making up one row of the word containing four pixels

assign valid = (x < 640) && (y < 480);
assign xx = x >> 1;
assign yy = y >> 1;

reg r, g, b;
reg [N-1:0] addr;
reg rd; 
reg wr;

wire enable;
assign enable = vga_mode == 1;

assign raddr = enable ? addr : {N{1'bZ}};
assign rrd = enable ? rd : 1'bZ;
assign rwr = enable ? wr : 1'bZ;

assign hs = enable ? x < (640 + 16) || x >= (640 + 16 + 96) : 1'bZ;
assign vs = enable ? y < (480 + 10) || y >= (480 + 10 + 2)  : 1'bZ;
assign rr = enable ? r : 1'bZ;
assign rg = enable ? g : 1'bZ;
assign rb = enable ? b : 1'bZ;

reg [3:0]count_read;
reg mem_read;
reg[2:0] state;

integer i = 0;
reg sprite_found;
reg [4:0] sprite_counter;

// Declare the sprite local memory
reg [63:0] sprite_pixels[0:SPRITE_NUM-1][0:15]; // 64x16 bits == 16x16 pixels for each sprite (SPRITE_NUM sprites supported)
reg [15:0] sprite_addr [0:SPRITE_NUM-1]; // addresses of all sprites
reg [15:0] sprite_x [0:SPRITE_NUM-1]; // x coordinate of all sprites
reg [15:0] sprite_y [0:SPRITE_NUM-1]; // y coordinate of all sprites
reg [3:0] sprite_transparent_color[0:SPRITE_NUM-1]; // transparent color for a sprite
reg [15:0] line_counter; // counter of lines of bytes to be fetched from the main memory into the sprite_pixels
reg [15:0] word_counter;  // counter of words within one row of sprite_pixels

always @(posedge clk) begin
	if (reset) begin
		clk50 <= 1'b0;
	end 
	clk50 <= ~clk50;
end

always @(posedge clk50) begin
//	newframe <= 0;
//	newline <= 0;
	if (reset) begin
		x <= 10'b0;
		y <= 10'b0;
		clk25 <= 1'b0;
		state <= IN_LINE;
		for (i = 0; i < SPRITE_NUM; i = i + 1) 
			sprite_addr[i] <= 16'd0;
		sprite_found = 1'b0;
//		newframe <= 1;
//		newline <= 1;
	end 
	else begin
		clk25 <= ~clk25;
		if (clk25 == 1'b1) begin
			if (x < 10'd799) begin
				x <= x + 1'b1;
			end 
			else begin
				x <= 10'b0;
				state <= IN_LINE;
//				newline <= 1;
				if (y < 10'd524) begin
					y <= y + 1'b1;
				end 
				else begin
					y <= 10'b0;
					sprite_found = 1'b0;
//					newframe <= 1;
				end
			end
			case (state) 
			IN_LINE, H_BLANK: begin
				pixels <= data;
				rd <= 1'bz;
				wr <= 1'bz;
				mem_read <= 1'b0;
			end
			READ_SPRITES: begin
				sprite_addr[sprite_counter] <= data;
				state <= READ_SPRITE_X;
				rd <= 1'b1;
				wr <= 1'b0;
				mem_read <= 1'b1;
				addr <= (16'd58 + (sprite_counter << 3)) >> 1;    // read x coordinate of the first sprite
			end
			READ_SPRITE_X: begin
				sprite_x[sprite_counter] <= data;
				state <= READ_SPRITE_Y;
				rd <= 1'b1;
				wr <= 1'b0;
				mem_read <= 1'b1;
				addr <= (16'd60 + (sprite_counter << 3)) >> 1;    // read y coordinate of the first sprite
			end
			READ_SPRITE_Y: begin
				sprite_y[sprite_counter] <= data;
				state <= READ_SPRITE_TRANSPARENT_COLOR;
				rd <= 1'b1;
				wr <= 1'b0;
				mem_read <= 1'b1;
				addr <= (16'd62 + (sprite_counter << 3)) >> 1;    // read transparent color of the first sprite
			end
			READ_SPRITE_TRANSPARENT_COLOR: begin
				sprite_transparent_color[sprite_counter] <= data[3:0];
				state <= READ_SPRITE_DATA;
				rd <= 1'b1;
				wr <= 1'b0;
				mem_read <= 1'b1;
				line_counter <= 16'b0;
				word_counter <= 4'b0;
				addr <= sprite_addr[sprite_counter] >> 1;    // read sprite definition bytes
			end
			READ_SPRITE_DATA: begin
				if (line_counter < 16) begin
					case (word_counter) 
					0:	sprite_pixels[sprite_counter][line_counter][63:48] <= data;
					1:	sprite_pixels[sprite_counter][line_counter][47:32] <= data;
					2:	sprite_pixels[sprite_counter][line_counter][31:16] <= data;
					3:	sprite_pixels[sprite_counter][line_counter][15:0]  <= data;
					endcase
					state <= READ_SPRITE_DATA;
					rd <= 1'b1;
					wr <= 1'b0;
					mem_read <= 1'b1;
					if (word_counter < 3) begin
						word_counter = word_counter + 1'b1;
					end
					else begin
						word_counter = 1'b0;
						line_counter = line_counter + 1'b1;
					end
					addr <= (sprite_addr[sprite_counter] + ((word_counter + (line_counter << 2)) << 1) ) >> 1;    // read sprite definition bytes
				end
				else 
				begin
					if (sprite_counter < SPRITE_NUM) begin
						sprite_counter <= sprite_counter + 1'b1;
						state <= READ_SPRITES;
						rd <= 1'b1;
						wr <= 1'b0;
						mem_read <= 1'b1;
						addr <= (16'd56 + ((sprite_counter + 1'b1) << 3)) >> 1;    // read next sprite definition address
					end
					else begin
						sprite_counter <= 4'b0;
						rd <= 1'b1;
						wr <= 1'b0;
						mem_read <= 1'b1;
						addr <= VIDEO_MEM_ADDR + 0;
						state <= V_BLANK;
					end
				end
			end
			V_BLANK: begin
				pixels <= data;
				state <= SCAN_IDLE;
				rd <= 1'bz;
				wr <= 1'bz;
				mem_read <= 1'b0;
			end
			endcase
		end 
		else begin
			// this is the other cycle when we divide 50MHz
			if ((x >= 640) && (y == 479) && (state == IN_LINE)) begin
					// During the vertical blanking, we have 44 lines available to read sprite data (more than 300 16-bit words of sprite data), and then we will read pixels at (0, 0)
					state <= READ_SPRITES;
					sprite_counter <= 4'b0;
					rd <= 1'b1;
					wr <= 1'b0;
					mem_read <= 1'b1;
					addr <= 16'd28;    // read first sprite definition address
				end
			else if ((x == 640) && (y < 479) && (state == IN_LINE)) begin
					// when we start the horizontal blanking, and we need to go to the next line, 
					// we need to fetch in advance the first word in next line (0, y+1)
					state <= H_BLANK;
					rd <= 1'b1;
					wr <= 1'b0;
					mem_read <= 1'b1;
					if ((y & 1) == 1) begin
						addr <= VIDEO_MEM_ADDR + ((yy + 1) * 80);
					end
					else begin
						addr <= VIDEO_MEM_ADDR + ((yy) * 80);
					end
			end
			// from this moment on, x and y are valid
			else if ((x < 640) && (y < 480)) begin 
				state <= IN_LINE;
				if ((x & 7) == 7)  begin
					// when we are finishing current word, containing four pixels, we need to fetch in advance next four pixels at (x+1, y)
					rd <= 1'b1;
					wr <= 1'b0;
					addr <= VIDEO_MEM_ADDR + ((xx >> 2) + (yy * 80) + 1);
					mem_read <= 1'b1;
				end
			end 
			 
		end
	end
	
	if (valid) begin
		for (i = 1; i < SPRITE_NUM; i = i+1) begin
			if ((sprite_addr[i] != 16'b0) && (xx >= sprite_x[i]) && (xx < (sprite_x[i] + 16)) && (yy >= sprite_y[i]) && (yy < (sprite_y[i] + 16))) begin
				sprite_found = 1'b1;
				if (
					sprite_pixels[i][yy - sprite_y[i]][60-(((xx - sprite_x[i]) << 2) ) + 0] != sprite_transparent_color[i][0] ||
					sprite_pixels[i][yy - sprite_y[i]][60-(((xx - sprite_x[i]) << 2) ) + 1] != sprite_transparent_color[i][1] ||
					sprite_pixels[i][yy - sprite_y[i]][60-(((xx - sprite_x[i]) << 2) ) + 2] != sprite_transparent_color[i][2]
				) begin
					r <= sprite_pixels[i][yy - sprite_y[i]][60-(((xx - sprite_x[i]) << 2) ) + 0] == 1'b1;
					g <= sprite_pixels[i][yy - sprite_y[i]][60-(((xx - sprite_x[i]) << 2) ) + 1] == 1'b1;
					b <= sprite_pixels[i][yy - sprite_y[i]][60-(((xx - sprite_x[i]) << 2) ) + 2] == 1'b1;
				end 
				else begin
					r <= pixels[12 - ((xx & 3) << 2) + 0] == 1'b1;
					g <= pixels[12 - ((xx & 3) << 2) + 1] == 1'b1;
					b <= pixels[12 - ((xx & 3) << 2) + 2] == 1'b1;
				end
			end 
		end
		if (!sprite_found) begin
			r <= pixels[12 - ((xx & 3) << 2) + 0] == 1'b1;
			g <= pixels[12 - ((xx & 3) << 2) + 1] == 1'b1;
			b <= pixels[12 - ((xx & 3) << 2) + 2] == 1'b1;
		end
		else begin
			sprite_found = 1'b0;
		end
	end
	else begin
		// blanking -> no pixels
		r <= 1'b0;
		g <= 1'b0;
		b <= 1'b0;
	end
end

initial begin
		x <= 10'b0;
		y <= 10'b0;
		clk25 <= 1'b0;
		clk50 <= 1'b0;
		state <= IN_LINE;
		for (i = 0; i < SPRITE_NUM; i = i + 1) 
			sprite_addr[i] <= 16'd0;
		sprite_found = 1'b0;
//		newframe <= 1;
//		newline <= 1;
end

endmodule
